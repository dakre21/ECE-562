
./fib_gem5.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <_Z14calc_fib_entryPv>:
  }
}

// Function pointer for pthreads to execute at (just calls calc_fib())
void* calc_fib_entry(void* thread_id)
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_Z14calc_fib_entryPv+0xd>
   d:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # 13 <_Z14calc_fib_entryPv+0x13>
  13:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 19 <_Z14calc_fib_entryPv+0x19>
  19:	b8 e8 03 00 00       	mov    $0x3e8,%eax
  1e:	eb 04                	jmp    24 <_Z14calc_fib_entryPv+0x24>
  20:	89 d6                	mov    %edx,%esi
  22:	89 ca                	mov    %ecx,%edx
// Function to calculate fibonacci sequence
void calc_fib()
{
  int i = 0;

  for (; i < NUM_FIB_CYCLES; i++)
  24:	83 e8 01             	sub    $0x1,%eax
  {
    fib = fib0 + fib1;
  27:	8d 0c 16             	lea    (%rsi,%rdx,1),%ecx
// Function to calculate fibonacci sequence
void calc_fib()
{
  int i = 0;

  for (; i < NUM_FIB_CYCLES; i++)
  2a:	75 f4                	jne    20 <_Z14calc_fib_entryPv+0x20>
// Outputs:
// - T/F (bool)
bool kill_pthreads(int num_threads)
{
  int i = 0;
  pthread_exit(&num_threads);
  2c:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  30:	89 0d 00 00 00 00    	mov    %ecx,0x0(%rip)        # 36 <_Z14calc_fib_entryPv+0x36>
  36:	89 15 00 00 00 00    	mov    %edx,0x0(%rip)        # 3c <_Z14calc_fib_entryPv+0x3c>
  3c:	89 0d 00 00 00 00    	mov    %ecx,0x0(%rip)        # 42 <_Z14calc_fib_entryPv+0x42>
  42:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
  49:	e8 00 00 00 00       	callq  4e <_Z14calc_fib_entryPv+0x4e>
  4e:	66 90                	xchg   %ax,%ax

0000000000000050 <_Z14setup_affinityi>:
// - req_cpus (int)
//
// Outputs:
// - T/F (bool)
bool setup_affinity(int req_cpus)
{
  50:	55                   	push   %rbp
  51:	48 89 e5             	mov    %rsp,%rbp
  54:	41 54                	push   %r12
  56:	53                   	push   %rbx
  57:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  5b:	e8 00 00 00 00       	callq  60 <_Z14setup_affinityi+0x10>
  cpu_set_t set;
  CPU_ZERO(&set); // Clear cpu set
  60:	31 c0                	xor    %eax,%eax
  62:	b9 10 00 00 00       	mov    $0x10,%ecx
  67:	4c 8d a5 70 ff ff ff 	lea    -0x90(%rbp),%r12
// - req_cpus (int)
//
// Outputs:
// - T/F (bool)
bool setup_affinity(int req_cpus)
{
  6e:	89 fb                	mov    %edi,%ebx
  cpu_set_t set;
  CPU_ZERO(&set); // Clear cpu set
  70:	4c 89 e7             	mov    %r12,%rdi
  73:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  int num_of_cpus = get_nprocs_conf(); // Get & set the number of available CPUs
  76:	e8 00 00 00 00       	callq  7b <_Z14setup_affinityi+0x2b>

  if (req_cpus > num_of_cpus)
  7b:	39 d8                	cmp    %ebx,%eax
  7d:	7c 51                	jl     d0 <_Z14setup_affinityi+0x80>
  }

  int i = 0;

  // Add all available cpus to set  
  for (; i < req_cpus; i++)
  7f:	31 c9                	xor    %ecx,%ecx
  81:	85 db                	test   %ebx,%ebx
  {
    CPU_SET(i, &set); // Add CPU to set
  83:	b8 01 00 00 00       	mov    $0x1,%eax
  }

  int i = 0;

  // Add all available cpus to set  
  for (; i < req_cpus; i++)
  88:	7e 17                	jle    a1 <_Z14setup_affinityi+0x51>
  8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  {
    CPU_SET(i, &set); // Add CPU to set
  90:	48 81 f9 ff 03 00 00 	cmp    $0x3ff,%rcx
  97:	76 64                	jbe    fd <_Z14setup_affinityi+0xad>
  99:	48 83 c1 01          	add    $0x1,%rcx
  }

  int i = 0;

  // Add all available cpus to set  
  for (; i < req_cpus; i++)
  9d:	39 cb                	cmp    %ecx,%ebx
  9f:	7f ef                	jg     90 <_Z14setup_affinityi+0x40>
  {
    CPU_SET(i, &set); // Add CPU to set
  }

  // Use all available CPUs for current process
  if (sched_setaffinity(getpid(), sizeof(set), &set) == -1)
  a1:	e8 00 00 00 00       	callq  a6 <_Z14setup_affinityi+0x56>
  a6:	4c 89 e2             	mov    %r12,%rdx
  a9:	be 80 00 00 00       	mov    $0x80,%esi
  ae:	89 c7                	mov    %eax,%edi
  b0:	e8 00 00 00 00       	callq  b5 <_Z14setup_affinityi+0x65>
  b5:	83 f8 ff             	cmp    $0xffffffff,%eax
  b8:	74 2e                	je     e8 <_Z14setup_affinityi+0x98>
    printf("ERROR: Could not set affinity properly.. check if you are running as root\n");  
    return false;
  }

  return true;
}
  ba:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
  {
    printf("ERROR: Could not set affinity properly.. check if you are running as root\n");  
    return false;
  }

  return true;
  be:	b8 01 00 00 00       	mov    $0x1,%eax
}
  c3:	5b                   	pop    %rbx
  c4:	41 5c                	pop    %r12
  c6:	5d                   	pop    %rbp
  c7:	c3                   	retq   
  c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  cf:	00 
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  d0:	bf 00 00 00 00       	mov    $0x0,%edi
  d5:	e8 00 00 00 00       	callq  da <_Z14setup_affinityi+0x8a>
  da:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
  int num_of_cpus = get_nprocs_conf(); // Get & set the number of available CPUs

  if (req_cpus > num_of_cpus)
  {
    printf("Error: Requested number of CPUs that is greater than the amount available\n");
    return false;
  de:	31 c0                	xor    %eax,%eax
    printf("ERROR: Could not set affinity properly.. check if you are running as root\n");  
    return false;
  }

  return true;
}
  e0:	5b                   	pop    %rbx
  e1:	41 5c                	pop    %r12
  e3:	5d                   	pop    %rbp
  e4:	c3                   	retq   
  e5:	0f 1f 00             	nopl   (%rax)
  e8:	bf 00 00 00 00       	mov    $0x0,%edi
  ed:	e8 00 00 00 00       	callq  f2 <_Z14setup_affinityi+0xa2>
  f2:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp

  // Use all available CPUs for current process
  if (sched_setaffinity(getpid(), sizeof(set), &set) == -1)
  {
    printf("ERROR: Could not set affinity properly.. check if you are running as root\n");  
    return false;
  f6:	31 c0                	xor    %eax,%eax
  }

  return true;
}
  f8:	5b                   	pop    %rbx
  f9:	41 5c                	pop    %r12
  fb:	5d                   	pop    %rbp
  fc:	c3                   	retq   
  int i = 0;

  // Add all available cpus to set  
  for (; i < req_cpus; i++)
  {
    CPU_SET(i, &set); // Add CPU to set
  fd:	48 89 ca             	mov    %rcx,%rdx
 100:	48 89 c6             	mov    %rax,%rsi
 103:	48 c1 ea 06          	shr    $0x6,%rdx
 107:	48 d3 e6             	shl    %cl,%rsi
 10a:	48 09 b4 d5 70 ff ff 	or     %rsi,-0x90(%rbp,%rdx,8)
 111:	ff 
 112:	eb 85                	jmp    99 <_Z14setup_affinityi+0x49>
 114:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%rax,%rax,1)
 11b:	00 00 00 00 00 

0000000000000120 <_Z13kill_pthreadsi>:
// - num_threads (int)
//
// Outputs:
// - T/F (bool)
bool kill_pthreads(int num_threads)
{
 120:	55                   	push   %rbp
 121:	48 89 e5             	mov    %rsp,%rbp
 124:	48 83 ec 10          	sub    $0x10,%rsp
 128:	e8 00 00 00 00       	callq  12d <_Z13kill_pthreadsi+0xd>
 12d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  int i = 0;
  pthread_exit(&num_threads);
 130:	48 8d 7d fc          	lea    -0x4(%rbp),%rdi
 134:	e8 00 00 00 00       	callq  139 <_Z13kill_pthreadsi+0x19>
 139:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000140 <_Z15create_pthreadsiPFPvS_E>:
// - entry_point (void*)
//
// Outputs:
// - T/F (bool)
bool create_pthreads(int num_threads, void* (*entry_point)(void*))
{
 140:	55                   	push   %rbp
 141:	48 89 e5             	mov    %rsp,%rbp
 144:	41 57                	push   %r15
 146:	41 56                	push   %r14
 148:	41 55                	push   %r13
 14a:	41 54                	push   %r12
 14c:	53                   	push   %rbx
 14d:	48 83 ec 18          	sub    $0x18,%rsp
 151:	e8 00 00 00 00       	callq  156 <_Z15create_pthreadsiPFPvS_E+0x16>
  if (num_threads > MAX_THREADS)
 156:	83 ff 0a             	cmp    $0xa,%edi
// - entry_point (void*)
//
// Outputs:
// - T/F (bool)
bool create_pthreads(int num_threads, void* (*entry_point)(void*))
{
 159:	41 89 ff             	mov    %edi,%r15d
 15c:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
  if (num_threads > MAX_THREADS)
 160:	0f 8f da 00 00 00    	jg     240 <_Z15create_pthreadsiPFPvS_E+0x100>
  {
    printf("ERROR: Number of threads requested exceeds maximum %d\n", MAX_THREADS);
    return false;
  }

  int rt_max_prio = sched_get_priority_max(SCHED_FIFO);
 166:	bf 01 00 00 00       	mov    $0x1,%edi
 16b:	e8 00 00 00 00       	callq  170 <_Z15create_pthreadsiPFPvS_E+0x30>

  pthread_attr_init(&sched_attr[0]); // Init thread attributes
 170:	bf 00 00 00 00       	mov    $0x0,%edi
  {
    printf("ERROR: Number of threads requested exceeds maximum %d\n", MAX_THREADS);
    return false;
  }

  int rt_max_prio = sched_get_priority_max(SCHED_FIFO);
 175:	41 89 c6             	mov    %eax,%r14d

  pthread_attr_init(&sched_attr[0]); // Init thread attributes
 178:	e8 00 00 00 00       	callq  17d <_Z15create_pthreadsiPFPvS_E+0x3d>
  pthread_attr_setscope(&sched_attr[0], PTHREAD_SCOPE_SYSTEM);
 17d:	31 f6                	xor    %esi,%esi
 17f:	bf 00 00 00 00       	mov    $0x0,%edi
 184:	e8 00 00 00 00       	callq  189 <_Z15create_pthreadsiPFPvS_E+0x49>
  pthread_attr_setinheritsched(&sched_attr[0], PTHREAD_EXPLICIT_SCHED); // Set inherit sched policy
 189:	be 01 00 00 00       	mov    $0x1,%esi
 18e:	bf 00 00 00 00       	mov    $0x0,%edi
 193:	e8 00 00 00 00       	callq  198 <_Z15create_pthreadsiPFPvS_E+0x58>
  pthread_attr_setschedpolicy(&sched_attr[0], SCHED_FIFO); // Set sched policy to FIFO
 198:	be 01 00 00 00       	mov    $0x1,%esi
 19d:	bf 00 00 00 00       	mov    $0x0,%edi
 1a2:	e8 00 00 00 00       	callq  1a7 <_Z15create_pthreadsiPFPvS_E+0x67>

  int i = 0;
  int rc;
  for (; i < num_threads; i++)
 1a7:	45 85 ff             	test   %r15d,%r15d
 1aa:	0f 8e c0 00 00 00    	jle    270 <_Z15create_pthreadsiPFPvS_E+0x130>
 1b0:	41 83 ef 01          	sub    $0x1,%r15d
 1b4:	bb 00 00 00 00       	mov    $0x0,%ebx
 1b9:	41 bd 00 00 00 00    	mov    $0x0,%r13d
 1bf:	49 8d 47 01          	lea    0x1(%r15),%rax
 1c3:	41 bc 00 00 00 00    	mov    $0x0,%r12d
 1c9:	45 31 ff             	xor    %r15d,%r15d
 1cc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
 1d0:	eb 20                	jmp    1f2 <_Z15create_pthreadsiPFPvS_E+0xb2>
 1d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
 1d8:	49 83 c7 01          	add    $0x1,%r15
 1dc:	48 83 c3 04          	add    $0x4,%rbx
 1e0:	49 83 c5 04          	add    $0x4,%r13
 1e4:	49 83 c4 08          	add    $0x8,%r12
 1e8:	4c 3b 7d c0          	cmp    -0x40(%rbp),%r15
 1ec:	0f 84 7e 00 00 00    	je     270 <_Z15create_pthreadsiPFPvS_E+0x130>
 1f2:	44 89 f0             	mov    %r14d,%eax
  {
    params[i].thread_id = i;
    rt_params[i].sched_priority = rt_max_prio - i; 	       // Set sched prio
    pthread_attr_setschedparam(&sched_attr[0], &rt_params[i]); // Set sched params & attr
 1f5:	4c 89 ee             	mov    %r13,%rsi
 1f8:	bf 00 00 00 00       	mov    $0x0,%edi
 1fd:	44 29 f8             	sub    %r15d,%eax
 200:	44 89 3b             	mov    %r15d,(%rbx)
 203:	41 89 45 00          	mov    %eax,0x0(%r13)
 207:	e8 00 00 00 00       	callq  20c <_Z15create_pthreadsiPFPvS_E+0xcc>
    rc = pthread_create(&threads[i], 	           	       // ptr to thread descriptor
		   	&sched_attr[0],            	       // thread attributes
 		   	entry_point,               	       // thread fn entry pt (same for each thread)
		   	(void*)&(params[i]) 	   	       // params to pass in
		   	);
 20c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 210:	48 89 d9             	mov    %rbx,%rcx
 213:	be 00 00 00 00       	mov    $0x0,%esi
 218:	4c 89 e7             	mov    %r12,%rdi
 21b:	e8 00 00 00 00       	callq  220 <_Z15create_pthreadsiPFPvS_E+0xe0>
    if (rc)
 220:	85 c0                	test   %eax,%eax
 222:	74 b4                	je     1d8 <_Z15create_pthreadsiPFPvS_E+0x98>
 224:	bf 00 00 00 00       	mov    $0x0,%edi
 229:	e8 00 00 00 00       	callq  22e <_Z15create_pthreadsiPFPvS_E+0xee>
      return false;
    }
  } 

  return true;
}
 22e:	48 83 c4 18          	add    $0x18,%rsp
		   	(void*)&(params[i]) 	   	       // params to pass in
		   	);
    if (rc)
    {
      printf("ERROR: Failed to create pthread... make sure you are running as root\n");
      return false;
 232:	31 c0                	xor    %eax,%eax
    }
  } 

  return true;
}
 234:	5b                   	pop    %rbx
 235:	41 5c                	pop    %r12
 237:	41 5d                	pop    %r13
 239:	41 5e                	pop    %r14
 23b:	41 5f                	pop    %r15
 23d:	5d                   	pop    %rbp
 23e:	c3                   	retq   
 23f:	90                   	nop
 240:	ba 0a 00 00 00       	mov    $0xa,%edx
 245:	be 00 00 00 00       	mov    $0x0,%esi
 24a:	bf 01 00 00 00       	mov    $0x1,%edi
 24f:	31 c0                	xor    %eax,%eax
 251:	e8 00 00 00 00       	callq  256 <_Z15create_pthreadsiPFPvS_E+0x116>
 256:	48 83 c4 18          	add    $0x18,%rsp
bool create_pthreads(int num_threads, void* (*entry_point)(void*))
{
  if (num_threads > MAX_THREADS)
  {
    printf("ERROR: Number of threads requested exceeds maximum %d\n", MAX_THREADS);
    return false;
 25a:	31 c0                	xor    %eax,%eax
      return false;
    }
  } 

  return true;
}
 25c:	5b                   	pop    %rbx
 25d:	41 5c                	pop    %r12
 25f:	41 5d                	pop    %r13
 261:	41 5e                	pop    %r14
 263:	41 5f                	pop    %r15
 265:	5d                   	pop    %rbp
 266:	c3                   	retq   
 267:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 26e:	00 00 
 270:	48 83 c4 18          	add    $0x18,%rsp
      printf("ERROR: Failed to create pthread... make sure you are running as root\n");
      return false;
    }
  } 

  return true;
 274:	b8 01 00 00 00       	mov    $0x1,%eax
}
 279:	5b                   	pop    %rbx
 27a:	41 5c                	pop    %r12
 27c:	41 5d                	pop    %r13
 27e:	41 5e                	pop    %r14
 280:	41 5f                	pop    %r15
 282:	5d                   	pop    %rbp
 283:	c3                   	retq   
 284:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%rax,%rax,1)
 28b:	00 00 00 00 00 

0000000000000290 <_Z8calc_fibv>:
// Fwd declaration of vars
uint32_t fib = 0, fib0 = 0, fib1 = 1;

// Function to calculate fibonacci sequence
void calc_fib()
{
 290:	55                   	push   %rbp
 291:	48 89 e5             	mov    %rsp,%rbp
 294:	e8 00 00 00 00       	callq  299 <_Z8calc_fibv+0x9>
 299:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # 29f <_Z8calc_fibv+0xf>
 29f:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 2a5 <_Z8calc_fibv+0x15>
 2a5:	b8 e8 03 00 00       	mov    $0x3e8,%eax
 2aa:	eb 08                	jmp    2b4 <_Z8calc_fibv+0x24>
 2ac:	0f 1f 40 00          	nopl   0x0(%rax)
 2b0:	89 d6                	mov    %edx,%esi
 2b2:	89 ca                	mov    %ecx,%edx
  int i = 0;

  for (; i < NUM_FIB_CYCLES; i++)
 2b4:	83 e8 01             	sub    $0x1,%eax
  {
    fib = fib0 + fib1;
 2b7:	8d 0c 16             	lea    (%rsi,%rdx,1),%ecx
// Function to calculate fibonacci sequence
void calc_fib()
{
  int i = 0;

  for (; i < NUM_FIB_CYCLES; i++)
 2ba:	75 f4                	jne    2b0 <_Z8calc_fibv+0x20>
 2bc:	89 0d 00 00 00 00    	mov    %ecx,0x0(%rip)        # 2c2 <_Z8calc_fibv+0x32>
 2c2:	89 15 00 00 00 00    	mov    %edx,0x0(%rip)        # 2c8 <_Z8calc_fibv+0x38>
 2c8:	89 0d 00 00 00 00    	mov    %ecx,0x0(%rip)        # 2ce <_Z8calc_fibv+0x3e>
  {
    fib = fib0 + fib1;
    fib0 = fib1;
    fib1 = fib;
  }
}
 2ce:	5d                   	pop    %rbp
 2cf:	c3                   	retq   

Disassembly of section .text.startup:

0000000000000000 <main>:
3) high priority single core smp
4) normal priority single core smp
-- DEFAULT is SMP and whatever core Linux wants the process to run on
*/
int main (int argc, char *argv[])
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	e8 00 00 00 00       	callq  c <main+0xc>
   c:	48 89 f3             	mov    %rsi,%rbx
  printf("FIB pid %d\n", getpid());
   f:	e8 00 00 00 00       	callq  14 <main+0x14>
  14:	be 00 00 00 00       	mov    $0x0,%esi
  19:	89 c2                	mov    %eax,%edx
  1b:	bf 01 00 00 00       	mov    $0x1,%edi
  20:	31 c0                	xor    %eax,%eax
  22:	e8 00 00 00 00       	callq  27 <main+0x27>
  int num_procs = get_nprocs_conf();
  27:	e8 00 00 00 00       	callq  2c <main+0x2c>
  bool hprio = false;
  
  if (argv[1] == NULL)
  2c:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
-- DEFAULT is SMP and whatever core Linux wants the process to run on
*/
int main (int argc, char *argv[])
{
  printf("FIB pid %d\n", getpid());
  int num_procs = get_nprocs_conf();
  30:	41 89 c4             	mov    %eax,%r12d
  bool hprio = false;
  
  if (argv[1] == NULL)
  33:	48 85 db             	test   %rbx,%rbx
  36:	0f 84 02 01 00 00    	je     13e <main+0x13e>
  {
    printf("INFO: Calculating default fib sequence\n");
  }
  else if (strcmp(argv[1], "1") == 0)
  3c:	bf 00 00 00 00       	mov    $0x0,%edi
  41:	b9 02 00 00 00       	mov    $0x2,%ecx
  46:	48 89 de             	mov    %rbx,%rsi
  49:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  4b:	0f 84 84 00 00 00    	je     d5 <main+0xd5>
  {
    printf("INFO: Calculating fib sequence with process at high priority in a multicore environment\n");
    hprio = true;
  }    
  else if (strcmp(argv[1], "2") == 0)
  51:	be 00 00 00 00       	mov    $0x0,%esi
  56:	48 89 df             	mov    %rbx,%rdi
  59:	e8 00 00 00 00       	callq  5e <main+0x5e>
  5e:	85 c0                	test   %eax,%eax
  60:	0f 84 a2 00 00 00    	je     108 <main+0x108>
  {
    printf("INFO: Calculating fib sequence with process at normal priority in a multicore environment\n");
  }
  else if (strcmp(argv[1], "3") == 0)
  66:	be 00 00 00 00       	mov    $0x0,%esi
  6b:	48 89 df             	mov    %rbx,%rdi
  6e:	e8 00 00 00 00       	callq  73 <main+0x73>
  73:	85 c0                	test   %eax,%eax
  75:	0f 84 9c 00 00 00    	je     117 <main+0x117>
  {
    printf("INFO: Calculating fib sequence with process at high priority in a unicore environment\n");
    hprio = true;
    num_procs = 1;
  }
  else if (strcmp(argv[1], "4") == 0)
  7b:	be 00 00 00 00       	mov    $0x0,%esi
  80:	48 89 df             	mov    %rbx,%rdi
  83:	e8 00 00 00 00       	callq  88 <main+0x88>
  88:	85 c0                	test   %eax,%eax
  8a:	0f 84 99 00 00 00    	je     129 <main+0x129>
  {
    printf("INFO: Calculating fib sequence with process at normal priority in a uniicore environment\n");
    num_procs = 1;
  }
  
  if (setup_affinity(num_procs) == false)
  90:	44 89 e7             	mov    %r12d,%edi
  93:	e8 00 00 00 00       	callq  98 <main+0x98>
  98:	84 c0                	test   %al,%al
  9a:	74 4f                	je     eb <main+0xeb>
  9c:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # a2 <main+0xa2>
  a2:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # a8 <main+0xa8>
  a8:	b8 e8 03 00 00       	mov    $0x3e8,%eax
  ad:	eb 05                	jmp    b4 <main+0xb4>
  af:	90                   	nop
  b0:	89 d6                	mov    %edx,%esi
  b2:	89 ca                	mov    %ecx,%edx
// Function to calculate fibonacci sequence
void calc_fib()
{
  int i = 0;

  for (; i < NUM_FIB_CYCLES; i++)
  b4:	83 e8 01             	sub    $0x1,%eax
  {
    fib = fib0 + fib1;
  b7:	8d 0c 16             	lea    (%rsi,%rdx,1),%ecx
// Function to calculate fibonacci sequence
void calc_fib()
{
  int i = 0;

  for (; i < NUM_FIB_CYCLES; i++)
  ba:	75 f4                	jne    b0 <main+0xb0>
  bc:	89 0d 00 00 00 00    	mov    %ecx,0x0(%rip)        # c2 <main+0xc2>
  c2:	89 15 00 00 00 00    	mov    %edx,0x0(%rip)        # c8 <main+0xc8>
  c8:	89 0d 00 00 00 00    	mov    %ecx,0x0(%rip)        # ce <main+0xce>
  else
  {
    calc_fib();
  }

  exit(0);
  ce:	31 ff                	xor    %edi,%edi
  d0:	e8 00 00 00 00       	callq  d5 <main+0xd5>
  d5:	bf 00 00 00 00       	mov    $0x0,%edi
  da:	e8 00 00 00 00       	callq  df <main+0xdf>
  {
    printf("INFO: Calculating fib sequence with process at normal priority in a uniicore environment\n");
    num_procs = 1;
  }
  
  if (setup_affinity(num_procs) == false)
  df:	44 89 e7             	mov    %r12d,%edi
  e2:	e8 00 00 00 00       	callq  e7 <main+0xe7>
  e7:	84 c0                	test   %al,%al
  e9:	75 08                	jne    f3 <main+0xf3>
  {
    exit(-1);
  eb:	83 cf ff             	or     $0xffffffff,%edi
  ee:	e8 00 00 00 00       	callq  f3 <main+0xf3>
  }

  if (hprio == true)
  {
    if (create_pthreads(1, calc_fib_entry) == false)
  f3:	be 00 00 00 00       	mov    $0x0,%esi
  f8:	bf 01 00 00 00       	mov    $0x1,%edi
  fd:	e8 00 00 00 00       	callq  102 <main+0x102>
 102:	84 c0                	test   %al,%al
 104:	75 c8                	jne    ce <main+0xce>
 106:	eb e3                	jmp    eb <main+0xeb>
 108:	bf 00 00 00 00       	mov    $0x0,%edi
 10d:	e8 00 00 00 00       	callq  112 <main+0x112>
 112:	e9 79 ff ff ff       	jmpq   90 <main+0x90>
 117:	bf 00 00 00 00       	mov    $0x0,%edi
  }
  else if (strcmp(argv[1], "3") == 0)
  {
    printf("INFO: Calculating fib sequence with process at high priority in a unicore environment\n");
    hprio = true;
    num_procs = 1;
 11c:	41 bc 01 00 00 00    	mov    $0x1,%r12d
 122:	e8 00 00 00 00       	callq  127 <main+0x127>
 127:	eb b6                	jmp    df <main+0xdf>
 129:	bf 00 00 00 00       	mov    $0x0,%edi
  }
  else if (strcmp(argv[1], "4") == 0)
  {
    printf("INFO: Calculating fib sequence with process at normal priority in a uniicore environment\n");
    num_procs = 1;
 12e:	41 bc 01 00 00 00    	mov    $0x1,%r12d
 134:	e8 00 00 00 00       	callq  139 <main+0x139>
 139:	e9 52 ff ff ff       	jmpq   90 <main+0x90>
 13e:	bf 00 00 00 00       	mov    $0x0,%edi
 143:	e8 00 00 00 00       	callq  148 <main+0x148>
 148:	e9 43 ff ff ff       	jmpq   90 <main+0x90>
